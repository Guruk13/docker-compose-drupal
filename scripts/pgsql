#!/usr/bin/env bash
# ____   ____   ____                         _
# |  _ \ / ___| |  _ \ _ __ _   _ _ __   __ _| |
# | | | | |     | | | | '__| | | | '_ \ / _  | |
# | |_| | |___  | |_| | |  | |_| | |_) | (_| | |
# |____/ \____| |____/|_|   \__,_| .__/ \__,_|_|
#                               |_|
#
# Helper to run postgres dump/restore, part of Docker Compose Drupal project.
# Based on Bash simple Boilerplate.
# https://github.com/Mogtofu33/docker-compose-drupal
#
# Usage:
#   pgsql dump | restore
#
# Depends on:
#  docker
#
# Bash Boilerplate: https://github.com/alphabetum/bash-boilerplate
# Bash Boilerplate: Copyright (c) 2015 William Melody • hi@williammelody.com

_SOURCE="${BASH_SOURCE[0]}"
while [ -h "$_SOURCE" ]; do # resolve $_SOURCE until the file is no longer a symlink
  _DIR="$( cd -P "$( dirname "$_SOURCE" )" && pwd )"
  _SOURCE="$(readlink "$_SOURCE")"
  [[ $_SOURCE != /* ]] && _SOURCE="$_DIR/$_SOURCE" # if $_SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
_DIR="$( cd -P "$( dirname "$_SOURCE" )" && pwd )"

if [ ! -f $_DIR/helpers/common.sh ]; then
  printf "[ERROR] Missing helpers/common.sh file.\\n"
  exit 1
fi

source $_DIR/helpers/common.sh

###############################################################################
# Help
###############################################################################

# _print_help()
#
# Usage:
#   _print_help
#
# Print the program help information.
_print_help() {
  _help_logo
  cat <<HEREDOC
Helper to dump and restore PGSQL db with pg_dump and pg_restore.

Usage:
  ${_ME} [dump | restore | list | drop | create] [database (default drupal)]

Options:
  -h --help  Show this screen.
HEREDOC
_help_options
}

_DUMP_FILE="dump.pg_dump"

###############################################################################
# Program Functions
###############################################################################

_create() {
  _DB_NAME=${1:-$POSTGRES_DB}
  _pgsql_exec \
    createdb -e --owner="${PGSQL_USER}" "${_DB_NAME}"
  _pgsql_exec \
    psql -e -d ${_DB_NAME} -c "GRANT ALL ON database ${_DB_NAME} TO ${PGSQL_USER}"
}

_drop() {
  _prompt_yn
  _DB_NAME=${1:-"drupal"}
  _pgsql_exec \
    dropdb --if-exists "${_DB_NAME}"
}

_fix_user() {
  _USER_NAME=${1:-"drupal"}
  _pgsql_exec \
    createuser "${_USER_NAME}"
}

_dump() {
  _DB_NAME=${1:-$POSTGRES_DB}
  _DUMP_FILE="dump_${_DB_NAME}_${_NOW}.pg_dump"
  _pgsql_exec \
    pg_dump -d "${_DB_NAME}" -U "${PGSQL_USER}" -hlocalhost -Fc -c -b -v -f ${PROJECT_CONTAINER_DUMP}/${_DUMP_FILE} \
    --exclude-table-data '*.cache*' --exclude-table-data '*.cachetags*' \
    --exclude-table-data '*.watchdog*' --exclude-table-data '*.node_access*' \
    --exclude-table-data '*.search_api_db_*' --exclude-table-data '*.sessions*' \
    --exclude-table-data '*.sessions*' --exclude-table-data '*.webprofiler*'

  printf "Database dump saved to %s\\n" ${_DUMP_FILE}
}

_restore() {
  _select_dump
  if [ ! -z "$_DUMP_FILE" ]; then
    printf "Restoring %s...\\n" $_DUMP_FILE
    _drop
    _create
    _pgsql_exec \
      pg_restore -h localhost -p 5432 --no-owner --role="${PGSQL_USER}" -U "${PGSQL_USER}" -d "${POSTGRES_DB}" -v ${PROJECT_CONTAINER_DUMP}/${_DUMP_FILE}
  fi
}

_list_dump() {
  printf "Available dump files:\\n"
  ls -lAh "${DUMP_FOLDER}"
}

# _ensure_dir() {
#   # No interactive, ensure permissions.
#   $_DOCKER exec $tty "${PROJECT_CONTAINER_PGSQL}" chown -R ${PGSQL_USER_ID} "${PROJECT_CONTAINER_DUMP}"
# }

_select_dump() {

  _DUMPS=$(ls "${DUMP_FOLDER}")
  _DUMPS=(`echo $_DUMPS | sed 's/ /\n/g'`)

  printf "Select a dump file:\\n"
  select opt in "${_DUMPS[@]}" "Cancel"; do
    case $opt in
      *.pg_dump|*.pgdump)
        _DUMP_FILE=$opt
        break
        ;;
      "Cancel")
        echo "You chose to cancel"
        _DUMP_FILE=""
        break
        ;;
      *)
        echo "This is not a number or wrong selection/file format"
        ;;
    esac
  done

}

_pgsql_exec() {
  $_DOCKER exec \
    "${PROJECT_CONTAINER_PGSQL}" \
      sh -c $@
}

###############################################################################
# Main
###############################################################################

# _main()
#
# Usage:
#   _main [<options>] [<arguments>]
#
# Description:
#   Entry point for the program, handling basic option parsing and dispatching.
_main() {

  _check_dependencies_docker
  _set_container_pgsql

  if [[ "${1:-}" =~ ^list$ ]]; then
    _list_dump
  elif [[ "${1:-}" =~ ^dump$ ]]; then
    # _ensure_dir
    _dump
  elif [[ "${1:-}" =~ ^restore$ ]]; then
    _restore
  elif [[ "${1:-}" =~ ^drop$ ]]; then
    _drop ${2:-}
  elif [[ "${1:-}" =~ ^create$ ]]; then
    _create ${2:-}
  elif [[ "${1:-}" =~ ^fix$ ]]; then
    _fix_user ${2:-}
  else
    _print_help
  fi
}

# Call `_main` after everything has been defined.
_main "$@"
